<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean Walsh]]></title>
  <link href="http://swalsh.org/atom.xml" rel="self"/>
  <link href="http://swalsh.org/"/>
  <updated>2014-06-14T15:08:07-07:00</updated>
  <id>http://swalsh.org/</id>
  <author>
    <name><![CDATA[Sean Walsh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Changes!]]></title>
    <link href="http://swalsh.org/blog/2014/06/14/changes/"/>
    <updated>2014-06-14T14:55:54-07:00</updated>
    <id>http://swalsh.org/blog/2014/06/14/changes</id>
    <content type="html"><![CDATA[<p>Well, this site has been sitting around unattended since my last post over a year ago. I figured it was about time to make some changes, so I took the opportunity to look into <a href="http://octopress.org/">Octopress</a> and here I am. I transferred a couple of posts over and plan to move some more this weekend. Unfortunately, I&rsquo;m going to lose all of the comments from my previous blog due to changing the commenting platform to Disqus.</p>

<p>I&rsquo;m hoping that a new platform will encourage me to start posting more often, so stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Logger API for ColdFusion]]></title>
    <link href="http://swalsh.org/blog/2013/04/22/chrome-logger-api-for-coldfusion/"/>
    <updated>2013-04-22T12:00:00-07:00</updated>
    <id>http://swalsh.org/blog/2013/04/22/chrome-logger-api-for-coldfusion</id>
    <content type="html"><![CDATA[<p>About two weeks ago, I spotted a link on either Reddit or Hacker News to a Google Chrome extension called <a href="http://www.chromelogger.com/">Chrome Logger</a>. I immediately saw the potential, because I frequently want to <code>cfdump</code> something but have to either abort immediately after or worry about my dump disappearing into a thread, screwing up my layout, etc., etc. There were libraries available for PHP, Python, and Ruby at the time (Node was added recently as well), so I figured I may as well jump on board and put one together for CF.</p>

<p>I finished my preliminary work on the component last weekend and used it at work all week, fixing bugs as I came across them. I&rsquo;m now reasonably confident that it can be put into the wild, so I&rsquo;m pleased to announce version 0.1 of chromelogger-cf, hosted at <a href="http://www.github.com/s992/chromelogger-cf.">http://www.github.com/s992/chromelogger-cf.</a></p>

<p>In addition to logging simple values, structs, arrays, and queries, I&rsquo;ve also added a method to convert objects (primarily ORM entities) into a struct representation, including relationships.</p>

<!-- more -->


<p>In addition to logging simple values, structs, arrays, and queries, I&rsquo;ve also added a method to convert objects (primarily ORM entities) into a struct representation, including relationships. I imagine this is where most of the bugs will surface, so please don&rsquo;t hesitate to open an issue if you run into some weirdness.</p>

<p>Ok, enough of the boring stuff &ndash; let&rsquo;s see how this thing actually works!</p>

<p>The most basic logging is accomplished via <code>chromelogger.log()</code>. Simply pass in any number of arguments and check the Chrome console.</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger1.cfc"></script>


<p>This results in the following output to the console:</p>

<p><img src="http://swalsh.org/images/chromelogger/scrn1.png"></p>

<p>Of course, if you don&rsquo;t want all your logged items on one line, you can call log() as many times as you want:</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger2.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn2.png"></p>

<p>In addition to <code>log()</code>, you also have the option to <code>warn()</code> and <code>error()</code>:</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger3.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn3.png"></p>

<p>Don&rsquo;t forget about objects and exceptions (note that the recursion between User and Address is caught and handled):</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger4.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn4.png"></p>

<p>Stucts, arrays, and queries are supported too:</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger5.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn5.png"></p>

<p>So, there you have it. Check out the project on GitHub for (a little) more documentation and to get started!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating New Datasource in Coldfusion]]></title>
    <link href="http://swalsh.org/blog/2013/03/20/programmatically-creating-new-datasource-in-coldfusion/"/>
    <updated>2013-03-20T14:23:15-07:00</updated>
    <id>http://swalsh.org/blog/2013/03/20/programmatically-creating-new-datasource-in-coldfusion</id>
    <content type="html"><![CDATA[<p>I got a new laptop at work. Awesome, right? This thing is blazing fast and a huge upgrade. Unfortunately, I needed to set up my entire local development environment all over again. I managed it with some quick and dirty batch scripts, but I was still left with the tedious task of creating datasources for each of the 40ish MySQL databases that I had imported. Each datasource entry is identical except for the database name, so I figured there must be a better way of doing it than manually creating each entry. Sure enough, there is&hellip;</p>

<!-- more -->


<p>The ColdFusion administrator offers a pretty nice <a href="http://help.adobe.com/en_US/ColdFusion/9.0/Admin/WSc3ff6d0ea77859461172e0811cbf364104-7fcf.html">API</a> that you can interact with to do things such as create mappings, manage debug settings, and a plethora of other stuff. Of course, you can also create datasources with it and it is dead simple to do. For my method to work, you do have to have at least one existing datasource, but I&rsquo;m sure you could just create that programmatically as well.</p>

<p>The code below uses the SHOW DATABASES command to get a list of all MySQL databases, and then creates a datasource for each. It will create datasources for stuff like information_schema and performance_schema, so you will have to manually delete those if you don&rsquo;t want them.</p>

<script src="https://gist.github.com/2141097.js"> </script>


<p>This isn&rsquo;t really something that I&rsquo;ll be using all that frequently, but I figured I&rsquo;d share it in case anyone else wanted to save themselves half an hour of setting up datasources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating SendGrid With Your ColdFusion Application]]></title>
    <link href="http://swalsh.org/blog/2011/12/07/integrating-sendgrid-with-your-coldfusion-application/"/>
    <updated>2011-12-07T13:23:33-08:00</updated>
    <id>http://swalsh.org/blog/2011/12/07/integrating-sendgrid-with-your-coldfusion-application</id>
    <content type="html"><![CDATA[<p>The majority of my day today was spent evaluating <a href="http://sendgrid.com/">SendGrid</a> and fiddling around with the API. For those of you unfamiliar with SendGrid, it&rsquo;s a hosted e-mail delivery service. At the very (very!) basic level, they provide a mailserver that you can use for your application. Of course, it&rsquo;s much more than that &ndash; the reason I was looking into it today is because we need a solid e-mail provider for e-mail newsletters for our clients. Currently, we are using an incredibly outdated version of Lyris List Manager and it&rsquo;s right about time that we replace it. Now, SendGrid doesn&rsquo;t provide any list management, that will have to be done in the application. What I&rsquo;m about to show you is how to interface with SendGrid to send (potentially) copious amounts of e-mail very, very easily.</p>

<!-- more -->


<h3>Getting Started</h3>

<p>Your first step is to sign up for an account. Luckily for us, SendGrid offers a free plan that allows you to send up to 200 e-mails per day &ndash; perfect for our testing environment! You can find the sign-up link at the very bottom of their <a href="http://sendgrid.com/pricing.html">product pricing page</a>. Once you sign up, it will take a few minutes before they get you up and running because they apparently verify each account by hand. I&rsquo;m not sure if this is actually true, but that&rsquo;s what they say.</p>

<p>Once you&rsquo;re set up, you can start using their service right away if you want. Just plug the SMTP settings into your mail client or CF application and you&rsquo;ll be eating away at those precious 200-daily e-mails. But we want to do something more interesting&hellip;</p>

<h3>The Fun Stuff</h3>

<p>SendGrid will allow you to send mail in three ways &ndash; normal SMTP, the Web API, and the SMTP API. We&rsquo;re going to be using the Web API for this demonstration, but the SMTP API is very, very similar.</p>

<p>X-SMTPAPI is where the real fun stuff comes into play. It&rsquo;s a JSON-encoded associative array that is inserted as a custom header in the SMTP API and as a URL parameter in the Web API. The array can contain any of the following keys(pulled from the <a href="http://docs.sendgrid.com/documentation/api/smtp-api/developers-guide/">documentation</a>):</p>

<ul>
<li>&ldquo;to&rdquo; &ndash; An address or list of addresses for the message to be sent to.</li>
<li>&ldquo;sub&rdquo; &ndash; An associative array of substitution tags, where each tag is associated with a list of replacement text for the tag in the body text. Each Substitution value corresponds to an email in the “To” section of the JSON string. Yah, it&rsquo;s mail merge.</li>
<li>&ldquo;section&rdquo; &ndash; Sections can be used to simplify substitution values that are common to many recipients. This is an associative array of sections that can be used in substitution values.</li>
<li>&ldquo;category&rdquo; &ndash; Associates the category of email this should be logged as. You may insert up to 10 categories as an array, these categories are not predefined.</li>
<li>&ldquo;unique_args&rdquo; &ndash; An associative array of arguments and their values to be applied to all emails sent in this SMTP API transaction.</li>
<li>&ldquo;filter&rdquo; &ndash; An associative array of filters and their settings, used to override filter settings already setup for your account. Settings are an associative array of the setting names and their values.</li>
</ul>


<p>SendGrid offers a few examples of code to build this JSON string in Perl, PHP, Python, and Ruby. I&rsquo;m most familiar with PHP, so I went ahead and grabbed the <a href="http://docs.sendgrid.com/documentation/api/smtp-api/php-example/">PHP version</a> and started converting it. I ended up with the following code, which works fine in my testing but has not yet been tested in a production setting &ndash; so use it at your own risk!</p>

<script src="https://gist.github.com/1445942.js?file=smtpApiHeader.cfc"></script>


<p>Now that we have the hard stuff out of the way, I&rsquo;m going to put together a simple form and processing page that will take a comma delimited list of e-mail addresses and a comma delimited list of user names and then send out a batch e-mail via SendGrid&rsquo;s Web API.</p>

<script src="https://gist.github.com/1445942.js?file=index.cfm"></script>


<p>Yah, it&rsquo;s an ugly form but it gets what we need. So, onward! Time to process the data from this form, translate it into a JSON string, and then ship it off to SendGrid.</p>

<script src="https://gist.github.com/1445942.js?file=process.cfm"></script>


<p>As you can see, this is a really simple process and I&rsquo;ve only just begun to scratch the surface.</p>

<p>Once again &ndash; I need to stress that none of this has been tested in production, so use my code at your own risk! You can grab the full source on my Gist at <a href="https://gist.github.com/1445942">https://gist.github.com/1445942</a></p>
]]></content>
  </entry>
  
</feed>
