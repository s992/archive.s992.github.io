<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean Walsh]]></title>
  <link href="http://swalsh.org/atom.xml" rel="self"/>
  <link href="http://swalsh.org/"/>
  <updated>2014-08-26T18:39:51-07:00</updated>
  <id>http://swalsh.org/</id>
  <author>
    <name><![CDATA[Sean Walsh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ratpack: First Impressions]]></title>
    <link href="http://swalsh.org/blog/2014/08/26/ratpack-first-impressions/"/>
    <updated>2014-08-26T17:21:28-07:00</updated>
    <id>http://swalsh.org/blog/2014/08/26/ratpack-first-impressions</id>
    <content type="html"><![CDATA[<p>I first heard about <a href="http://www.ratpack.io/">Ratpack</a> about a month ago at Gr8Conf US. I didn&rsquo;t make room in my schedule to go to any of the sessions, but I did add it to my (long) list of stuff to check out. Most things that end up on that list have a 50/50 chance of ever making it into my editor.</p>

<p>Luckily, I found an excuse to check it out &ndash; and I&rsquo;m glad I did. My current project at work requires me to interface with a third party web based API, but that API doesn&rsquo;t actually exist just yet. Using Ratpack, I was able to quickly mock up the API and then code against my mock. Unfortunately (or maybe fortunately!), the application <em>is</em> for work and I can&rsquo;t share it. What I can share, however, is my first impression of Ratpack.</p>

<!-- more -->


<h3>Documentation</h3>

<p>The first thing I do when I&rsquo;m checking out a new library or framework is head straight to the documentation. Ratpack has a <a href="http://www.ratpack.io/manual/current/index.html">manual</a> as well as <a href="http://www.ratpack.io/manual/current/api/">API docs</a>. The manual (as described in the <a href="http://www.ratpack.io/manual/current/intro.html#how_to_read_the_documentation">&ldquo;How to read the documentation&rdquo;</a> section) features a high level overview of Ratpack concepts.</p>

<p>Looking through the manual, it&rsquo;s obvious that Ratpack is a work in progress. Several sections are missing entirely and replaced by &ldquo;TODO&rdquo; blocks. This was a point of frustration, but between the manual and the API docs I was able to get enough of an understanding to cobble a workable application together. Building a Ratpack application today requires some research and frustrated Googling, but ultimately I was able to find everything I needed.</p>

<p>I imagine the manual in its current state will be more useful for non-Groovy projects, as it seems that a majority of the &ldquo;TODO&rdquo; blocks are located in the <a href="http://www.ratpack.io/manual/current/groovy.html#groovy">Groovy section</a>.</p>

<h3>Examples</h3>

<p>After I&rsquo;m done scanning the documentation, I like to check out examples of the codebase. There&rsquo;s no shortage of example Ratpack applications: you can find five examples <a href="https://github.com/ratpack">here</a>, three of which are Groovy based &ndash; example-books, example-ratpack-gradle-groovy-app, and example-ratpack-standalone-groovy-script.</p>

<p>I was working with Gradle, so I checked out example-ratpack-gradle-groovy-app first. Unfortunately, it hasn&rsquo;t been touched in eight months and seems to have stopped working. I was unable to build it, so I moved on to example-books, which is also Gradle based. This one ran, and I was able to poke around a little bit and get a feel for it.</p>

<p>I should note that at this time I didn&rsquo;t really have a strong understanding of how a Ratpack application is structured. There&rsquo;s a lot of stuff going on in example-books, and most of it went right over my head. I ultimately ended up cutting down example-books to create a completely barebones Ratpack example that doesn&rsquo;t really do anything, but writing it helped me get a better grasp on what exactly was necessary to get a Ratpack application started. You can find that example <a href="https://github.com/ratpack/example-books.git">here</a>.</p>

<h3>Setup</h3>

<p>The manual lists two options under the &ldquo;Setup&rdquo; heading: the Gradle plugin and Lazybones project templates. At this point, I had no desire to look into Lazybones (which, by the way, seems like a fine project &ndash; you can find it right <a href="https://github.com/pledbrook/lazybones">here</a> on GitHub), so I headed to the <a href="http://www.ratpack.io/manual/current/setup.html#using_the_gradle_plugins">Gradle section</a>. Unfortunately, it&rsquo;s one of the sections that has nothing but a &ldquo;TODO.&rdquo;</p>

<p>There is another section of the manual dedicated to <a href="http://www.ratpack.io/manual/current/gradle.html#building_with_gradle">building with Gradle</a>, so I&rsquo;m not really sure what the maintainers are planning to add to the Setup > Gradle section. Regardless, I was able to find what I was looking for in this section and it was trivial to create a Gradle build file that would run my (not yet created) Ratpack application.</p>

<h3>Coding</h3>

<p>One of my favorite things about Groovy is how easy an API can be to work with when using DSLs. Ratpack is no exception: all of your endpoints are configured via the handlers DSL. Here&rsquo;s an example of an application with two endpoints: <code>/hello</code> and <code>/goodbye</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">ratpack</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">handlers</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">get</span><span class="o">(</span><span class="s2">&quot;hello&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">render</span> <span class="s2">&quot;Hello, World!&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">get</span><span class="o">(</span><span class="s2">&quot;goodbye&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">render</span> <span class="s2">&quot;Goodbye, World!&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works exactly as you would expect it to &ndash; when navigating to example.com/hello, &ldquo;Hello, World!&rdquo; is sent to the browser. And, of course, navigating to example.com/goodbye results in &ldquo;Goodbye, World!&rdquo;</p>

<p>Later this week, I&rsquo;ll be writing another post that looks at the code behind a Ratpack application more in depth. For now, I&rsquo;ll just say that I found Ratpack&rsquo;s DSL very intuitive and I enjoyed writing code with it.</p>

<h3>Community</h3>

<p>This is a short bullet point, but I just wanted to point out that there is a <a href="http://forum.ratpack.io/">forum</a> for discussing Ratpack. The forum seems fairly active and I was able to find some very helpful information there.</p>

<h3>Final Thoughts</h3>

<p>I found Ratpack to be an enjoyable framework to work with. If you don&rsquo;t mind referencing a few different sources of documentation (and probably a bit of trial and error), I would highly recommend checking it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running the Groovy Console From Gradle]]></title>
    <link href="http://swalsh.org/blog/2014/07/17/running-the-groovy-console-from-gradle/"/>
    <updated>2014-07-17T19:47:43-07:00</updated>
    <id>http://swalsh.org/blog/2014/07/17/running-the-groovy-console-from-gradle</id>
    <content type="html"><![CDATA[<p>I tend to write stuff iteratively. I&rsquo;ll write a little chunk, then poke at it a bit, then write some more, and so on. The Groovy Console is a great tool for doing so, but one thing that just hasn&rsquo;t &ldquo;clicked&rdquo; with me yet is the concept of dependencies, classpaths, and all the dependency management stuff in between (Maven, Gradle, Ivy, etc.).</p>

<p>I quickly found myself frustrated with my lack of understanding, so I got in to the bad habit of just pasting all my classes right into the Groovy Console window and playing around with them right there. As my toy projects grew larger (and especially once they started relying on external dependencies), this became unworkable.</p>

<p>I did some poking around and found three ways to run the Groovy Console from Gradle, which (as far as I can tell) populates the Groovy Console classpath with everything I need for my project.</p>

<!-- more -->


<p>The first option I found is a quick snippet from <a href="http://piraguaconsulting.blogspot.com/2012/02/gradle-groovy-console.html">Mike Hugo&rsquo;s blog</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span><span class="o">(</span> <span class="n">console</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s2">&quot;classes&quot;</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">JavaExec</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">main</span> <span class="o">=</span> <span class="s2">&quot;groovy.ui.Console&quot;</span>
</span><span class='line'>  <span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works great and can just be dropped in to your <code>build.gradle</code>, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s2">&quot;groovy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span><span class="o">(</span> <span class="n">console</span><span class="o">,</span> <span class="nl">dependsOn:</span> <span class="s2">&quot;classes&quot;</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">JavaExec</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">main</span> <span class="o">=</span> <span class="s2">&quot;groovy.ui.Console&quot;</span>
</span><span class='line'>  <span class="n">classpath</span> <span class="o">=</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;org.codehaus.groovy:groovy-all:2.3.4&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can just run <code>gradle console</code> from the project root to fire up the Groovy Console.</p>

<p>I didn&rsquo;t have to look far for the next option &ndash; it was right in the comments on Mike&rsquo;s blog! Inspired by the post, Carlos Souza created a <a href="https://github.com/carlosgsouza/gradle-console">Gradle plugin</a> to add the <code>console</code> task to your project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s2">&quot;groovy&quot;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s2">&quot;console&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;org.codehaus.groovy:groovy-all:2.3.3&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">buildscript</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">classpath</span> <span class="s2">&quot;net.carlosgsouza:gradle-console:1.0&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This plugin works the same way as Mike&rsquo;s does, but I did run into a bit of an issue. If you&rsquo;ve been reading (very) closely, you&rsquo;ll notice that in this version of my build script I dropped the version of my Groovy dependency from 2.3.4 to 2.3.3. When running <code>gradle console</code> with 2.3.4, I received this exception:</p>

<p><code>Conflicting module versions. Module groovy-all is loaded in version 2.3.3 and you are trying to load version 2.3.4</code></p>

<p>I couldn&rsquo;t find much info on the error, but, as far as I can tell, I probably have multiple versions of Groovy in my classpath. I do have both 2.3.3 and 2.3.4 on my system, so I&rsquo;ll just chalk it up to poor configuration on my part.</p>

<p>The final option is the <a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">application plugin</a>. By applying the plugin and setting <code>mainClassName = "groovy.ui.Console"</code>, we can use <code>gradle run</code> to launch the Groovy Console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s2">&quot;groovy&quot;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s2">&quot;application&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">mainClassName</span> <span class="o">=</span> <span class="s2">&quot;groovy.ui.Console&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="s1">&#39;org.codehaus.groovy:groovy-all:2.3.4&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each option seems to work just as well as the others, but I prefer the application plugin simply because it requires fewer lines than the other two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: Angular Debugging]]></title>
    <link href="http://swalsh.org/blog/2014/07/01/quick-tip-angular-debugging/"/>
    <updated>2014-07-01T18:34:40-07:00</updated>
    <id>http://swalsh.org/blog/2014/07/01/quick-tip-angular-debugging</id>
    <content type="html"><![CDATA[<p>Occasionally I&rsquo;ll run into someone who is having trouble debugging their Angular application and their first complaint is almost always the incomprehensible error messages. You know the type, they look like this:</p>

<p><img src="http://swalsh.org/images/angulardebug/angular-minified-error.png"></p>

<p>You&rsquo;ll see ugly error messages like that when you are using the <em>minified</em> version of Angular. But, don&rsquo;t lose hope! You can find a full error message with a (sometimes) helpful explanation by just hitting the link immediately following <code>Error: [$injector:unpr]</code>. I find that a lot of people tend to gloss over that URL when confronted with the ugly error. For an example of where that link takes you, you can try this one from the screenshot: <a href="https://docs.angularjs.org/error/$injector/unpr?p0=iDontExistProvider%20%3C-%20iDontExist">https://docs.angularjs.org/error/$injector/unpr?p0=iDontExistProvider%20%3C-%20iDontExist</a>. It&rsquo;s obviously a contrived error for the sake of this post, but it will give you an idea of what to expect.</p>

<p>Now, if you&rsquo;re working in a development environment and battling ugly error messages, you can swap out your minified Angular for the unminified version and get a nicer error:</p>

<p><img src="http://swalsh.org/images/angulardebug/angular-unminified-error.png"></p>

<p>Now we can see what&rsquo;s going on at a glance (in this case, Angular&rsquo;s dependency injection can&rsquo;t find <code>iDontExist</code>), but we still have access to the URL in case we need more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Browser Automation With Geb]]></title>
    <link href="http://swalsh.org/blog/2014/06/25/groovy-browser-automation-with-geb/"/>
    <updated>2014-06-25T18:06:22-07:00</updated>
    <id>http://swalsh.org/blog/2014/06/25/groovy-browser-automation-with-geb</id>
    <content type="html"><![CDATA[<p>As I was going over my tentative itinerary for <a href="http://gr8conf.us">GR8Conf</a> (my first Groovy conference!), I spotted a session titled, &ldquo;Functional testing your Grails app with GEB.&rdquo; The session, given by <a href="https://twitter.com/ColinHarrington">Colin Harrington</a>, will be covering &ldquo;&hellip;what it takes to test your grails application with Geb.&rdquo; According to the <a href="http://www.gebish.org/">Geb website</a>, Geb (pronounced &ldquo;jeb&rdquo;) is a browser automation solution for Groovy. I&rsquo;ve always been curious about browser automation, and Geb&rsquo;s easy-to-read syntax really piqued my interest. I decided to dive in to the documentation &ndash; <a href="http://www.gebish.org/manual/current/">The Book of Geb</a> &ndash; and see if I could take some of their examples and translate them over to my site.</p>

<!-- more -->


<p>I&rsquo;m running each of these scripts in the GroovyConsole with Groovy version 2.3.3. Unless otherwise noted, you can assume the code samples here are prepended with this <code>@Grab</code> from the <a href="http://www.gebish.org/manual/current/intro.html#installation__usage">installation and usage</a> section of the docs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Grapes</span><span class="o">([</span>
</span><span class='line'>  <span class="nd">@Grab</span><span class="o">(</span><span class="s2">&quot;org.gebish:geb-core:0.9.3&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nd">@Grab</span><span class="o">(</span><span class="s2">&quot;org.seleniumhq.selenium:selenium-firefox-driver:2.41.0&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="nd">@Grab</span><span class="o">(</span><span class="s2">&quot;org.seleniumhq.selenium:selenium-support:2.41.0&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>This first script is just basic Geb &ndash; it navigates to my home page and then clicks through to the other two pages on my site &ndash; Archives and About &ndash; and verifies that we&rsquo;re navigating to where we think we&rsquo;re navigating to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">import</span> <span class="nn">geb.Browser</span>
</span><span class='line'>
</span><span class='line'><span class="n">Browser</span><span class="o">.</span><span class="na">drive</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// navigate to my site</span>
</span><span class='line'>  <span class="n">go</span> <span class="s2">&quot;http://swalsh.org&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// make sure we made it to my site</span>
</span><span class='line'>  <span class="k">assert</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;Sean Walsh&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// grab the &quot;Archives&quot; link...</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">archivesLink</span> <span class="o">=</span> <span class="n">$</span><span class="o">(</span><span class="s2">&quot;ul.main-navigation&quot;</span><span class="o">).</span><span class="na">find</span><span class="o">(</span><span class="s2">&quot;li&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">).</span><span class="na">find</span><span class="o">(</span><span class="s2">&quot;a&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...and then click it</span>
</span><span class='line'>  <span class="n">archivesLink</span><span class="o">.</span><span class="na">click</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// did we make it?</span>
</span><span class='line'>  <span class="k">assert</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;Blog Archive - Sean Walsh&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// grab the &quot;About&quot; link...and click it</span>
</span><span class='line'>  <span class="kt">def</span> <span class="n">aboutLink</span> <span class="o">=</span> <span class="n">$</span><span class="o">(</span><span class="s2">&quot;a&quot;</span><span class="o">,</span> <span class="nl">href:</span><span class="s2">&quot;http://swalsh.org/about&quot;</span><span class="o">).</span><span class="na">click</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// success!</span>
</span><span class='line'>  <span class="k">assert</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;About - Sean Walsh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I kick off the script, it takes about five seconds to run through my site &ndash; the delay is due to Geb waiting for each page to load before moving on to the next action.</p>

<p>So, that was pretty cool, but it really only scratched the surface of what we can do. Geb also allows us to model our pages and even fragments of those pages (via the <code>Page</code> and <code>Module</code> objects, respectively). First, I decided to model out a navigation link and and the navigation bar as modules. These modules can be included into page objects and other modules. Additionally, you can define parameters &ndash; such as <code>linkText</code> in <code>NavigationLink</code> &ndash; that will be populated when the module is included. Finally (at least for this example), the module&rsquo;s properties are defined in the content DSL. You&rsquo;ll see how these properties are used in a later example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">NavigationLink</span> <span class="kd">extends</span> <span class="n">Module</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">def</span> <span class="n">linkText</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="n">content</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">link</span> <span class="o">{</span> <span class="n">$</span><span class="o">(</span><span class="s2">&quot;a&quot;</span><span class="o">,</span> <span class="nl">text:</span> <span class="n">linkText</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">NavigationBar</span> <span class="kd">extends</span> <span class="n">Module</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">content</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">homeLink</span> <span class="o">{</span> <span class="n">module</span> <span class="n">NavigationLink</span><span class="o">,</span> <span class="nl">linkText:</span> <span class="s2">&quot;Home&quot;</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">archiveLink</span> <span class="o">{</span> <span class="n">module</span> <span class="n">NavigationLink</span><span class="o">,</span> <span class="nl">linkText:</span> <span class="s2">&quot;Archives&quot;</span> <span class="o">}</span>
</span><span class='line'>      <span class="n">aboutLink</span> <span class="o">{</span> <span class="n">module</span> <span class="n">NavigationLink</span><span class="o">,</span> <span class="nl">linkText:</span> <span class="s2">&quot;About&quot;</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve got our navigation modeled, we can move on to modeling out the pages. I have a parent class, <code>SwalshPage</code>, that includes the <code>NavigationBar</code> module as <code>navBar</code> so that I can extend <code>SwalshPage</code> from each of my pages and I don&rsquo;t have to include the navigation bar module in each of them (yay inheritance!). In each of the actual pages, I&rsquo;ve added a <code>url</code> and a static <code>at</code> method for making sure we&rsquo;ve navigated to where we want to go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">SwalshPage</span> <span class="kd">extends</span> <span class="n">Page</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">content</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">navBar</span> <span class="o">{</span> <span class="n">module</span> <span class="n">NavigationBar</span> <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">HomePage</span> <span class="kd">extends</span> <span class="n">SwalshPage</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://swalsh.org&quot;</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">at</span> <span class="o">=</span> <span class="o">{</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;Sean Walsh&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">ArchivesPage</span> <span class="kd">extends</span> <span class="n">SwalshPage</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://swalsh.org/archives&quot;</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">at</span> <span class="o">=</span> <span class="o">{</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;Blog Archive - Sean Walsh&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">AboutPage</span> <span class="kd">extends</span> <span class="n">SwalshPage</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">static</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://swalsh.org/about&quot;</span>
</span><span class='line'>  <span class="kd">static</span> <span class="n">at</span> <span class="o">=</span> <span class="o">{</span> <span class="n">title</span> <span class="o">==</span> <span class="s2">&quot;About - Sean Walsh&quot;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can kick off the actual test. This code will move us to the home page and then click through to both the blog archives and the about page, stopping just long enough to verify we&rsquo;re in the correct location:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">Browser</span><span class="o">.</span><span class="na">drive</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">to</span> <span class="n">HomePage</span>
</span><span class='line'>  <span class="k">assert</span> <span class="nf">at</span><span class="o">(</span> <span class="n">HomePage</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">navBar</span><span class="o">.</span><span class="na">archiveLink</span><span class="o">.</span><span class="na">link</span><span class="o">.</span><span class="na">click</span><span class="o">()</span>
</span><span class='line'>  <span class="k">assert</span> <span class="nf">at</span><span class="o">(</span> <span class="n">ArchivesPage</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">navBar</span><span class="o">.</span><span class="na">aboutLink</span><span class="o">.</span><span class="na">link</span><span class="o">.</span><span class="na">click</span><span class="o">()</span>
</span><span class='line'>  <span class="k">assert</span> <span class="nf">at</span><span class="o">(</span> <span class="n">AboutPage</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the full code for the last three blocks on <a href="https://gist.github.com/s992/a935c39fa2c600cee740">this gist</a>.</p>

<p>As I said before, we&rsquo;re only just barely scratching the surface of the functionality available in Geb. The documentation has 18 chapters, and this code has only touched on the features described in the chapter 1.4 examples. I don&rsquo;t know if the rest of Geb is as easy and intuitive as the (very simple) examples I&rsquo;ve provided, but I will definitely be heading to Colin&rsquo;s session at GR8Conf to find out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changes!]]></title>
    <link href="http://swalsh.org/blog/2014/06/14/changes/"/>
    <updated>2014-06-14T14:55:54-07:00</updated>
    <id>http://swalsh.org/blog/2014/06/14/changes</id>
    <content type="html"><![CDATA[<p>Well, this site has been sitting around unattended since my last post over a year ago. I figured it was about time to make some changes, so I took the opportunity to look into <a href="http://octopress.org/">Octopress</a> and here I am. I transferred a couple of posts over and plan to move some more this weekend. Unfortunately, I&rsquo;m going to lose all of the comments from my previous blog due to changing the commenting platform to Disqus.</p>

<p>I&rsquo;m hoping that a new platform will encourage me to start posting more often, so stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Logger API for ColdFusion]]></title>
    <link href="http://swalsh.org/blog/2013/04/22/chrome-logger-api-for-coldfusion/"/>
    <updated>2013-04-22T12:00:00-07:00</updated>
    <id>http://swalsh.org/blog/2013/04/22/chrome-logger-api-for-coldfusion</id>
    <content type="html"><![CDATA[<p>About two weeks ago, I spotted a link on either Reddit or Hacker News to a Google Chrome extension called <a href="http://www.chromelogger.com/">Chrome Logger</a>. I immediately saw the potential, because I frequently want to <code>cfdump</code> something but have to either abort immediately after or worry about my dump disappearing into a thread, screwing up my layout, etc., etc. There were libraries available for PHP, Python, and Ruby at the time (Node was added recently as well), so I figured I may as well jump on board and put one together for CF.</p>

<p>I finished my preliminary work on the component last weekend and used it at work all week, fixing bugs as I came across them. I&rsquo;m now reasonably confident that it can be put into the wild, so I&rsquo;m pleased to announce version 0.1 of chromelogger-cf, hosted at <a href="http://www.github.com/s992/chromelogger-cf">http://www.github.com/s992/chromelogger-cf</a></p>

<p>In addition to logging simple values, structs, arrays, and queries, I&rsquo;ve also added a method to convert objects (primarily ORM entities) into a struct representation, including relationships.</p>

<!-- more -->


<p>In addition to logging simple values, structs, arrays, and queries, I&rsquo;ve also added a method to convert objects (primarily ORM entities) into a struct representation, including relationships. I imagine this is where most of the bugs will surface, so please don&rsquo;t hesitate to open an issue if you run into some weirdness.</p>

<p>Ok, enough of the boring stuff &ndash; let&rsquo;s see how this thing actually works!</p>

<p>The most basic logging is accomplished via <code>chromelogger.log()</code>. Simply pass in any number of arguments and check the Chrome console.</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger1.cfc"></script>


<p>This results in the following output to the console:</p>

<p><img src="http://swalsh.org/images/chromelogger/scrn1.png"></p>

<p>Of course, if you don&rsquo;t want all your logged items on one line, you can call log() as many times as you want:</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger2.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn2.png"></p>

<p>In addition to <code>log()</code>, you also have the option to <code>warn()</code> and <code>error()</code>:</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger3.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn3.png"></p>

<p>Don&rsquo;t forget about objects and exceptions (note that the recursion between User and Address is caught and handled):</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger4.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn4.png"></p>

<p>Stucts, arrays, and queries are supported too:</p>

<script src="https://gist.github.com/s992/5431987.js?file=chromelogger5.cfc"></script>


<p><img src="http://swalsh.org/images/chromelogger/scrn5.png"></p>

<p>So, there you have it. Check out the project on GitHub for (a little) more documentation and to get started!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Creating New Datasource in Coldfusion]]></title>
    <link href="http://swalsh.org/blog/2013/03/20/programmatically-creating-new-datasource-in-coldfusion/"/>
    <updated>2013-03-20T14:23:15-07:00</updated>
    <id>http://swalsh.org/blog/2013/03/20/programmatically-creating-new-datasource-in-coldfusion</id>
    <content type="html"><![CDATA[<p>I got a new laptop at work. Awesome, right? This thing is blazing fast and a huge upgrade. Unfortunately, I needed to set up my entire local development environment all over again. I managed it with some quick and dirty batch scripts, but I was still left with the tedious task of creating datasources for each of the 40ish MySQL databases that I had imported. Each datasource entry is identical except for the database name, so I figured there must be a better way of doing it than manually creating each entry. Sure enough, there is&hellip;</p>

<!-- more -->


<p>The ColdFusion administrator offers a pretty nice <a href="http://help.adobe.com/en_US/ColdFusion/9.0/Admin/WSc3ff6d0ea77859461172e0811cbf364104-7fcf.html">API</a> that you can interact with to do things such as create mappings, manage debug settings, and a plethora of other stuff. Of course, you can also create datasources with it and it is dead simple to do. For my method to work, you do have to have at least one existing datasource, but I&rsquo;m sure you could just create that programmatically as well.</p>

<p>The code below uses the SHOW DATABASES command to get a list of all MySQL databases, and then creates a datasource for each. It will create datasources for stuff like information_schema and performance_schema, so you will have to manually delete those if you don&rsquo;t want them.</p>

<script src="https://gist.github.com/2141097.js"> </script>


<p>This isn&rsquo;t really something that I&rsquo;ll be using all that frequently, but I figured I&rsquo;d share it in case anyone else wanted to save themselves half an hour of setting up datasources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating SendGrid With Your ColdFusion Application]]></title>
    <link href="http://swalsh.org/blog/2011/12/07/integrating-sendgrid-with-your-coldfusion-application/"/>
    <updated>2011-12-07T13:23:33-08:00</updated>
    <id>http://swalsh.org/blog/2011/12/07/integrating-sendgrid-with-your-coldfusion-application</id>
    <content type="html"><![CDATA[<p>The majority of my day today was spent evaluating <a href="http://sendgrid.com/">SendGrid</a> and fiddling around with the API. For those of you unfamiliar with SendGrid, it&rsquo;s a hosted e-mail delivery service. At the very (very!) basic level, they provide a mailserver that you can use for your application. Of course, it&rsquo;s much more than that &ndash; the reason I was looking into it today is because we need a solid e-mail provider for e-mail newsletters for our clients. Currently, we are using an incredibly outdated version of Lyris List Manager and it&rsquo;s right about time that we replace it. Now, SendGrid doesn&rsquo;t provide any list management, that will have to be done in the application. What I&rsquo;m about to show you is how to interface with SendGrid to send (potentially) copious amounts of e-mail very, very easily.</p>

<!-- more -->


<h3>Getting Started</h3>

<p>Your first step is to sign up for an account. Luckily for us, SendGrid offers a free plan that allows you to send up to 200 e-mails per day &ndash; perfect for our testing environment! You can find the sign-up link at the very bottom of their <a href="http://sendgrid.com/pricing.html">product pricing page</a>. Once you sign up, it will take a few minutes before they get you up and running because they apparently verify each account by hand. I&rsquo;m not sure if this is actually true, but that&rsquo;s what they say.</p>

<p>Once you&rsquo;re set up, you can start using their service right away if you want. Just plug the SMTP settings into your mail client or CF application and you&rsquo;ll be eating away at those precious 200-daily e-mails. But we want to do something more interesting&hellip;</p>

<h3>The Fun Stuff</h3>

<p>SendGrid will allow you to send mail in three ways &ndash; normal SMTP, the Web API, and the SMTP API. We&rsquo;re going to be using the Web API for this demonstration, but the SMTP API is very, very similar.</p>

<p>X-SMTPAPI is where the real fun stuff comes into play. It&rsquo;s a JSON-encoded associative array that is inserted as a custom header in the SMTP API and as a URL parameter in the Web API. The array can contain any of the following keys(pulled from the <a href="http://docs.sendgrid.com/documentation/api/smtp-api/developers-guide/">documentation</a>):</p>

<ul>
<li>&ldquo;to&rdquo; &ndash; An address or list of addresses for the message to be sent to.</li>
<li>&ldquo;sub&rdquo; &ndash; An associative array of substitution tags, where each tag is associated with a list of replacement text for the tag in the body text. Each Substitution value corresponds to an email in the “To” section of the JSON string. Yah, it&rsquo;s mail merge.</li>
<li>&ldquo;section&rdquo; &ndash; Sections can be used to simplify substitution values that are common to many recipients. This is an associative array of sections that can be used in substitution values.</li>
<li>&ldquo;category&rdquo; &ndash; Associates the category of email this should be logged as. You may insert up to 10 categories as an array, these categories are not predefined.</li>
<li>&ldquo;unique_args&rdquo; &ndash; An associative array of arguments and their values to be applied to all emails sent in this SMTP API transaction.</li>
<li>&ldquo;filter&rdquo; &ndash; An associative array of filters and their settings, used to override filter settings already setup for your account. Settings are an associative array of the setting names and their values.</li>
</ul>


<p>SendGrid offers a few examples of code to build this JSON string in Perl, PHP, Python, and Ruby. I&rsquo;m most familiar with PHP, so I went ahead and grabbed the <a href="http://docs.sendgrid.com/documentation/api/smtp-api/php-example/">PHP version</a> and started converting it. I ended up with the following code, which works fine in my testing but has not yet been tested in a production setting &ndash; so use it at your own risk!</p>

<script src="https://gist.github.com/1445942.js?file=smtpApiHeader.cfc"></script>


<p>Now that we have the hard stuff out of the way, I&rsquo;m going to put together a simple form and processing page that will take a comma delimited list of e-mail addresses and a comma delimited list of user names and then send out a batch e-mail via SendGrid&rsquo;s Web API.</p>

<script src="https://gist.github.com/1445942.js?file=index.cfm"></script>


<p>Yah, it&rsquo;s an ugly form but it gets what we need. So, onward! Time to process the data from this form, translate it into a JSON string, and then ship it off to SendGrid.</p>

<script src="https://gist.github.com/1445942.js?file=process.cfm"></script>


<p>As you can see, this is a really simple process and I&rsquo;ve only just begun to scratch the surface.</p>

<p>Once again &ndash; I need to stress that none of this has been tested in production, so use my code at your own risk! You can grab the full source on my Gist at <a href="https://gist.github.com/1445942">https://gist.github.com/1445942</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a GitHub Activity Feed]]></title>
    <link href="http://swalsh.org/blog/2011/10/31/building-a-github-activity-feed/"/>
    <updated>2011-10-31T12:00:00-07:00</updated>
    <id>http://swalsh.org/blog/2011/10/31/building-a-github-activity-feed</id>
    <content type="html"><![CDATA[<p>When I set out to come up with a cool design for my site, I wasn&rsquo;t really sure what I was shooting for. I just downloaded Twitter Bootstrap and went to work throwing DIVs around. I&rsquo;m pretty happy with how it came out, but one part that I really like a lot is the GitHub feed you see in the right hand column. I haven&rsquo;t ever seen a site with one and there weren&rsquo;t any tutorials on how to make one, so I figured I&rsquo;d jump right in.</p>

<!-- more -->


<p>From my GitHub profile, I could see that there was an easy way to pull an RSS feed of my Public Activity, so I figured I&rsquo;d start there. Clicking the icon returns an Atom feed with a lot of (unnecessary, in my opinion) mark-up. The DOM for a single push looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">base=</span><span class="s">&quot;https://github.com/s992.atom&quot;</span> <span class="na">class=</span><span class="s">&quot;feedEntryContent&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;details&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;commits&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>
</span><span class='line'>              <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;committer&quot;</span> <span class="na">href=</span><span class="s">&quot;/s992&quot;</span><span class="nt">&gt;</span>s992<span class="nt">&lt;/a&gt;</span> committed <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/s992/tweet-this/commit/c96859cf3930d33ace3e23783d17a186af96dce0&quot;</span><span class="nt">&gt;</span>c96859c<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;blockquote&gt;</span>Allow for configuration of content types to Tweet from, updated readme accordingly.<span class="nt">&lt;/blockquote&gt;</span>
</span><span class='line'>              <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a lot of divs for a simple display that was going to be a pain in the ass to style. I was a little disappointed and the thought of trying to parse it with regex sounded miserable(on a related note, is there a decent DOM parser for CF?). I remembered that Twitter will give you your activity stream in different formats by specifying them in the URL, a la <a href="http://api.twitter.com/1/statuses/user_timeline.rss?screen_name=theseanwalsh.">http://api.twitter.com/1/statuses/user_timeline.rss?screen_name=theseanwalsh.</a> I decided to give it a shot and change the URL I was pinging to <a href="https://www.github.com/s992.json">https://www.github.com/s992.json</a> instead of s992.atom. Lo and behold, it worked! I had something to start with&hellip;</p>

<p>Reading over the JSON that was returned, it quickly became apparent that I was not going to be able to just take what GitHub gave me and loop over it unless I wanted a lot of logic in my view. Each &ldquo;event&rdquo; &ndash; Push, Pull, Fork, Follow, Watch, etc. &ndash; had a slightly different JSON structure. Well, I love writing cfscript and I love writing components, so I figured I&rsquo;d try my hand at writing a component to parse the JSON into a more usable format.</p>

<p>For each item that I wanted to display, I knew I wanted to follow the same general format: [actor] did [action] to [target]. The date, URL, and repository description or commit message wouldn&rsquo;t hurt either. So, I got to work.</p>

<p>The first thing I needed to do was make the request to GitHub and turn that into some JSON:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">array</span> <span class="n">function</span> <span class="nf">makeHttpRequestAndReturnJSON</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">httpSvc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">http</span><span class="o">();</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">json</span> <span class="o">=</span> <span class="err">&#39;&#39;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">httpSvc</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span> <span class="n">variables</span><span class="o">.</span><span class="na">jsonURL</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">httpSvc</span><span class="o">.</span><span class="na">addParam</span><span class="o">(</span> <span class="n">type</span><span class="o">=</span><span class="err">&#39;</span><span class="n">CGI</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="err">&#39;</span><span class="n">accept</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="err">&#39;</span><span class="n">text</span><span class="o">/</span><span class="n">json</span><span class="err">&#39;</span><span class="o">,</span> <span class="n">encoded</span><span class="o">=</span><span class="err">&#39;</span><span class="n">no</span><span class="err">&#39;</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">json</span> <span class="o">=</span> <span class="n">httpSvc</span><span class="o">.</span><span class="na">send</span><span class="o">().</span><span class="na">getPrefix</span><span class="o">().</span><span class="na">filecontent</span><span class="o">;</span>
</span><span class='line'>  <span class="n">json</span> <span class="o">=</span> <span class="n">deSerializeJSON</span><span class="o">(</span> <span class="n">json</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">json</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is pretty self explanatory. Once I had the JSON, I needed to mold it into something that I was ready to use in my view, so I wrote a method to loop over it and call some other methods depending on the type of event that GitHub said it was.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">array</span> <span class="n">function</span> <span class="nf">makeCleanJSON</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">rArray</span> <span class="o">=</span> <span class="n">arrayNew</span><span class="o">(</span> <span class="mi">1</span> <span class="o">);</span>
</span><span class='line'>  <span class="c1">//Don&#39;t worry about this, I just went overboard with getters and setters</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">json</span> <span class="o">=</span> <span class="n">getDirtyJSON</span><span class="o">();</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Because of potential missing events, I have to keep an &quot;actual count&quot; of</span>
</span><span class='line'>  <span class="c1">//items inserted into the struct so that my feed isn&#39;t shorter than I want</span>
</span><span class='line'>  <span class="c1">//it to be.</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">actualCount</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">actualCount</span> <span class="o">&lt;=</span> <span class="n">variables</span><span class="o">.</span><span class="na">itemLimit</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//json[i].type contains the type of event for each item</span>
</span><span class='line'>      <span class="k">switch</span><span class="o">(</span><span class="n">json</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">//Depending on the event, we&#39;ll call the correct method and pass it the item in question</span>
</span><span class='line'>          <span class="k">case</span> <span class="s">&quot;PushEvent&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rArray</span><span class="o">[</span> <span class="n">actualCount</span> <span class="o">]</span> <span class="o">=</span> <span class="n">handlePushEvent</span><span class="o">(</span> <span class="n">json</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">);</span>
</span><span class='line'>              <span class="n">actualCount</span><span class="o">++;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s">&quot;WatchEvent&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rArray</span><span class="o">[</span> <span class="n">actualCount</span> <span class="o">]</span> <span class="o">=</span> <span class="n">handleWatchEvent</span><span class="o">(</span> <span class="n">json</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">);</span>
</span><span class='line'>              <span class="n">actualCount</span><span class="o">++;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s">&quot;CreateEvent&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rArray</span><span class="o">[</span> <span class="n">actualCount</span> <span class="o">]</span> <span class="o">=</span> <span class="n">handleCreateEvent</span><span class="o">(</span> <span class="n">json</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">);</span>
</span><span class='line'>              <span class="n">actualCount</span><span class="o">++;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s">&quot;ForkEvent&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rArray</span><span class="o">[</span> <span class="n">actualCount</span> <span class="o">]</span> <span class="o">=</span> <span class="n">handleForkEvent</span><span class="o">(</span> <span class="n">json</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">);</span>
</span><span class='line'>              <span class="n">actualCount</span><span class="o">++;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="s">&quot;FollowEvent&quot;</span><span class="o">:</span>
</span><span class='line'>              <span class="n">rArray</span><span class="o">[</span> <span class="n">actualCount</span> <span class="o">]</span> <span class="o">=</span> <span class="n">handleFollowEvent</span><span class="o">(</span> <span class="n">json</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">);</span>
</span><span class='line'>              <span class="n">actualCount</span><span class="o">++;</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">default</span><span class="o">:</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">rArray</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I played around with the idea of dynamically making the method calls(and getting rid of that ugly switch/case block) by using evaluate, but I don&rsquo;t have a comprehensive list of the potential events &ndash; meaning that if GitHub tosses me an event that I haven&rsquo;t written a method for, I&rsquo;ll get a big ugly CF error due to a missing method. If anyone can suggest a better way to do this, I&rsquo;m all ears! You&rsquo;ll also see that I keep two counters &ndash; one for the loop through the JSON and another that counts how many items I&rsquo;ve actually put into my returned array. The reason for this is that if I hit an event that I haven&rsquo;t accounted for, I will end up with a struct that is missing some keys.</p>

<p>Each method called is pretty similar(and you can check out the full CFC by hitting the download link at the bottom of the post), so I&rsquo;ll just give an example of one of them &ndash; handlePushEvent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">struct</span> <span class="n">function</span> <span class="nf">handlePushEvent</span><span class="o">(</span> <span class="n">required</span> <span class="n">struct</span> <span class="n">event</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//My cleverly named return struct</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">rStruct</span> <span class="o">=</span> <span class="n">structNew</span><span class="o">();</span>
</span><span class='line'>  <span class="c1">//We&#39;ll need the branch and the repository to build the target string</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">branch</span> <span class="o">=</span> <span class="n">listGetAt</span><span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">payload</span><span class="o">.</span><span class="na">ref</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="s">&quot;/&quot;</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">repository</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">owner</span> <span class="o">&amp;</span> <span class="s">&quot;/&quot;</span> <span class="o">&amp;</span> <span class="n">event</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">target</span> <span class="o">=</span> <span class="err">&#39;&#39;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//For my site, I didn&#39;t want to include the branch in push events because</span>
</span><span class='line'>  <span class="c1">//the string was too long, so I wrote in a little option that can be set</span>
</span><span class='line'>  <span class="c1">//to keep it short</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">variables</span><span class="o">.</span><span class="na">targetType</span> <span class="n">EQ</span> <span class="s">&quot;short&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">target</span> <span class="o">=</span> <span class="n">repository</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">target</span> <span class="o">=</span> <span class="n">branch</span> <span class="o">&amp;</span> <span class="s">&quot; at &quot;</span> <span class="o">&amp;</span> <span class="n">repository</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//I use the event field to style the li in the view</span>
</span><span class='line'>  <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;event&quot;</span><span class="o">,</span> <span class="s">&quot;push&quot;</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;url&quot;</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">url</span> <span class="o">);</span>
</span><span class='line'>  <span class="c1">//GitHub&#39;s date format is 2011/09/01 19:38:47 -0700, which CF didn&#39;t want to work with,</span>
</span><span class='line'>  <span class="c1">//so I&#39;m going to pass it on to another method to format it.</span>
</span><span class='line'>  <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;date&quot;</span><span class="o">,</span> <span class="n">formatGitHubDateString</span><span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">created_at</span> <span class="o">)</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;actor&quot;</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">actor</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;action&quot;</span><span class="o">,</span> <span class="s">&quot;pushed to&quot;</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;target&quot;</span><span class="o">,</span> <span class="n">target</span> <span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">arraylen</span><span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">payload</span><span class="o">.</span><span class="na">shas</span> <span class="o">)</span> <span class="n">GT</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;description&quot;</span><span class="o">,</span>
</span><span class='line'>                 <span class="n">buildArrayForMultipleCommits</span><span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">payload</span><span class="o">.</span><span class="na">shas</span> <span class="o">)</span> <span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">structInsert</span><span class="o">(</span> <span class="n">rStruct</span><span class="o">,</span> <span class="s">&quot;description&quot;</span><span class="o">,</span> <span class="n">arguments</span><span class="o">.</span><span class="na">event</span><span class="o">.</span><span class="na">payload</span><span class="o">.</span><span class="na">shas</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">3</span><span class="o">]</span> <span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">rStruct</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re still paying attention, you&rsquo;ll notice that I make a call to buildArrayForMultipleCommits() in there. The reason for this is that GitHub passes all commits for a specific event in an array. There is a lot of stuff in there I don&rsquo;t care about, like the SHA, the author e-mail, and the author name &ndash; all I care about is the commit message right now. So, I just loop over the array and return an array that only has the commit messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">array</span> <span class="n">function</span> <span class="nf">buildArrayForMultipleCommits</span><span class="o">(</span> <span class="n">required</span> <span class="n">array</span> <span class="n">commits</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">rArray</span> <span class="o">=</span> <span class="n">arrayNew</span><span class="o">(</span> <span class="mi">1</span> <span class="o">);</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">arraylen</span><span class="o">(</span> <span class="n">arguments</span><span class="o">.</span><span class="na">commits</span> <span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">rArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">.</span><span class="na">commits</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">rArray</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alright, we&rsquo;re ready to go! Now all I have to do in my view is grab the &ldquo;clean&rdquo; JSON and loop over it, formatting it how I want it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;feed&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cfset</span> <span class="na">myJSON =</span><span class="err"> </span><span class="s">new</span> <span class="na">GitHubJSONParser</span><span class="err">(</span> <span class="err">&#39;</span><span class="na">https:</span><span class="err">//</span><span class="na">github</span><span class="err">.</span><span class="na">com</span><span class="err">/</span><span class="na">s992</span><span class="err">.</span><span class="na">json</span><span class="err">&#39;</span> <span class="err">).</span><span class="na">getCleanJSON</span><span class="err">()</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;cfloop</span> <span class="na">from=</span><span class="s">&quot;1&quot;</span> <span class="na">to=</span><span class="s">&quot;#arrayLen(myJSON)#&quot;</span> <span class="na">index=</span><span class="s">&quot;i&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;feedItem #myJSON[i].event#&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#myJSON[i].url#&quot;</span> <span class="na">class=</span><span class="s">&quot;updateLink&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>              #myJSON[i].actor#
</span><span class='line'>              #myJSON[i].action#
</span><span class='line'>              #myJSON[i].target#
</span><span class='line'>          <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>          <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;updateMessage&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;cfif</span> <span class="na">isArray</span><span class="err">(</span> <span class="na">myJSON</span><span class="err">[</span><span class="na">i</span><span class="err">].</span><span class="na">description</span> <span class="err">)</span> <span class="nt">&gt;</span>
</span><span class='line'>                  Multiple commits:
</span><span class='line'>                  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;commits&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;cfloop</span> <span class="na">array=</span><span class="s">&quot;#myJSON[i].description#&quot;</span> <span class="na">index=</span><span class="s">&quot;commit&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>                          <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                              #commit#
</span><span class='line'>                          <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                      <span class="nt">&lt;/cfloop&gt;</span>
</span><span class='line'>                  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>              <span class="nt">&lt;cfelse&gt;</span>
</span><span class='line'>              #myJSON[i].description#
</span><span class='line'>          <span class="nt">&lt;/cfif&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;lastUpdated&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>          #myJSON[i].date#
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/cfloop&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve uploaded the CFC as well as my Mura display object to GitHub, so please feel free to check it out and give me some feedback! You can find it at <a href="https://github.com/s992/github-feed-widget">https://github.com/s992/github-feed-widget</a></p>
]]></content>
  </entry>
  
</feed>
